ReceiveAdapter
--------------
* ReceiveAdapter Allocates Resources
* ReceiveAdapter Creates New Message
* ReceiveAdapter Publishes Message to Channel
* ReceiveAdapter Writes to Message
* ReceiveAdapter Closes Request Stream
* ReceiveAdapter Cleans Up Resources

Channel
-------
* Channel Receives Message
* Channel Notifies Subscribers of Message
* Channel Receives Stream of Data from Sender and forwards to subscribers

Filter
------
* Filter Receives Message from Input Channel
* Filter Creates Function that Receives Byte Event and buffers input until it has enough information to step forward once
* Filter Wraps Receive Message in New Message and applies function to Body
* Filter Publishes new Message to Output Channel

SendAdapter
-----------
* SendAdapter Receives message from Input Channel
* SendAdapter Creates Output Stream
* SendAdapter Forwards Data to Output Stream
* SendAdapter Closes Output Stream


Implmentation Detail
--------------------

receiveLocation.Process(IContext context)
{
	var messageContext = new MessageContext();
	var messageStream = File.OpenRead(context["FileUri"]);
	var message = new Message(messageContext, messageStream);
	OutputChannel.Publish(message);
}

channel1.Publish(IMessage message)
{
	foreach(var messageHandler in messageHandlers)
	{
		var messageProcessor = messageHandler.CreateMessageProcessor(IMessageContext context);
		messageProcessorList.Add(messageProcessor);
	}

	do
	{
		byte[] buffer = new byte[1024];
		ArraySegment<byte> segement = new ArraySegment<byte>(buffer, offset, length);
		foreach(var messageProcessor in messageProcessors)
		{		
			messageProcessor.OnNext(segment);
		}
	} while(bytesRead > 0);
}